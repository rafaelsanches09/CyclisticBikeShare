# Data Analysis Phase: Process #
# Goal: Understand available data and do some cleaning as needed #

USE cyclistic_bike_share;

# Total number of rides during the year of 2023 before cleaning process #
SELECT COUNT(ride_id) AS total_rides
FROM tripdata_2023;

# Results: 5.711.618 observations

# Checking for duplicates (RIDE_ID) #
SELECT 
  ride_id,
  COUNT(*) AS total
FROM tripdata_2023
GROUP BY ride_id
HAVING COUNT(*) > 1;

# Results: 0 duplicates

#Checking for null values#

SELECT
    SUM(CASE WHEN ride_id IS NULL OR ride_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_ride_id,
    SUM(CASE WHEN rideable_type IS NULL OR rideable_type = '' THEN 1 ELSE 0 END) AS NULL_or_empty_rideable_type,
    SUM(CASE WHEN started_at IS NULL THEN 1 ELSE 0 END) AS NULL_or_empty_started_at,
    SUM(CASE WHEN ended_at IS NULL THEN 1 ELSE 0 END) AS NULL_or_empty_endeded_at,
    SUM(CASE WHEN start_station_name IS NULL OR start_station_name = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_station_name,
    SUM(CASE WHEN start_station_id IS NULL OR start_station_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_station_id,
    SUM(CASE WHEN end_station_name IS NULL OR end_station_name = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_station_name,
    SUM(CASE WHEN end_station_id IS NULL OR end_station_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_station_id, 
    SUM(CASE WHEN member_casual IS NULL OR member_casual = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_member_casual, 
    SUM(CASE WHEN start_lat IS NULL OR start_lat = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_lat,
    SUM(CASE WHEN start_lng IS NULL OR start_lng = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_lng,
    SUM(CASE WHEN end_lat IS NULL OR end_lat = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_lat,
    SUM(CASE WHEN end_lng IS NULL OR end_lng = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_lng
FROM tripdata_2023;

# Creating a new table to work with. Tripdata_2023 will be kept as backup #

CREATE TABLE tripdata_2023_v1
( ride_id VARCHAR(255),
 rideable_type VARCHAR (255),
 started_at datetime,
 ended_at datetime,
 start_station_name VARCHAR(255),
 start_station_id VARCHAR(255), 
 end_station_name VARCHAR(255),
 end_station_id VARCHAR(255), 
 start_lat VARCHAR(255),	
 start_lng VARCHAR(255),
 end_lat VARCHAR(255),
 end_lng VARCHAR(255),
 member_casual VARCHAR(255)
 ) AS 
 SELECT * FROM tripdata_2023;


# Checking again for null values, this time on the new table #

 SELECT
    SUM(CASE WHEN ride_id IS NULL OR ride_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_ride_id,
    SUM(CASE WHEN rideable_type IS NULL OR rideable_type = '' THEN 1 ELSE 0 END) AS NULL_or_empty_rideable_type,
    SUM(CASE WHEN started_at IS NULL THEN 1 ELSE 0 END) AS NULL_or_empty_started_at,
    SUM(CASE WHEN ended_at IS NULL THEN 1 ELSE 0 END) AS NULL_or_empty_endeded_at,
    SUM(CASE WHEN start_station_name IS NULL OR start_station_name = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_station_name,
    SUM(CASE WHEN start_station_id IS NULL OR start_station_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_station_id,
    SUM(CASE WHEN end_station_name IS NULL OR end_station_name = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_station_name,
    SUM(CASE WHEN end_station_id IS NULL OR end_station_id = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_station_id, 
    SUM(CASE WHEN start_lat IS NULL OR TRIM(start_lat) = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_lat,
    SUM(CASE WHEN start_lng IS NULL OR TRIM(start_lng) = '' THEN 1 ELSE 0 END) AS NULL_or_empty_start_lng,
    SUM(CASE WHEN end_lat IS NULL OR TRIM(end_lat) = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_lat,
    SUM(CASE WHEN end_lng IS NULL OR TRIM(end_lng) = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_lng,
    SUM(CASE WHEN member_casual IS NULL OR member_casual = '' THEN 1 ELSE 0 END) AS NULL_or_empty_end_member_casual 
FROM tripdata_2023_v1; 

# After analyzing the query results for null values, it was observed that approximately 900k null values were present in the columns start_station_name, start_station_id, end_station_name, and end_station_id. 
# In a real-life situation, I would investigate the root cause of these null values and attempt to resolve the issue. 
# However, for this case study, I decided to drop these columns and work with the remaining variables. 
# I deemed this approach more beneficial than excluding all the affected rows, as doing so would result in a 20% reduction in data.

# Additionally, approximately 7k null values were present in the columns end_lat and end_lng. These were also excluded from the analysis to ensure data consistency.

 ALTER TABLE tripdata_2023_v1
 DROP COLUMN start_station_name,
 DROP COLUMN start_station_id,
 DROP COLUMN end_station_name,
 DROP COLUMN end_station_id;
 
# Deleting null values from the columns related to end_lat and end_lng #

DELETE
FROM tripdata_2023_v1
WHERE (end_lat IS NULL OR TRIM(end_lat) = '');

DELETE
FROM tripdata_2023_v1
WHERE (end_lng IS NULL OR TRIM(end_lng) = '');

 SELECT * FROM tripdata_2023_v1;
 
 # CHECKING WHETHER THERE IS A REGISTER WITH ENDED_AT AFTER STARTED_AT #
 # RESULT: 1.279 ROWS #
 SELECT  *
 FROM tripdata_2023_v1
 WHERE ended_at <= started_at;

# Removing these registers. 

DELETE
FROM tripdata_2023_v1
WHERE ended_at <= started_at;

# Adding additional columns duration, month and day of week

ALTER TABLE tripdata_2023_v1
ADD COLUMN duration INT;

UPDATE tripdata_2023_v1
SET duration = TIMESTAMPDIFF(SECOND, started_at, ended_at);

ALTER TABLE tripdata_2023_v1
ADD COLUMN month INT;

UPDATE tripdata_2023_v1
SET month = MONTH(started_at);
 
ALTER TABLE tripdata_2023_v1
ADD COLUMN day_of_week INT;

UPDATE tripdata_2023_v1
SET day_of_week = DAYOFWEEK(started_at);

# Checking data once again #
SELECT *
FROM tripdata_2023_v1;

## Data is ready to be analyzed #


 
